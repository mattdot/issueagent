name: Manual Test - Azure AI Foundry (Environment Variables)

# Manual workflow for testing Azure AI Foundry connectivity using environment variables
# Tests the environment variable fallback mechanism

on:
  workflow_dispatch:
    inputs:
      test_scenario:
        description: 'Test scenario to run'
        required: true
        type: choice
        options:
          - 'env-vars-only'
          - 'mixed-config'
          - 'validation-errors'
        default: 'env-vars-only'

jobs:
  test-env-var-config:
    name: Test Environment Variable Configuration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: Restore Dependencies
        run: dotnet restore
      
      - name: Build Solution
        run: dotnet build --no-restore --configuration Release
      
      - name: Test Scenario - Environment Variables Only
        if: ${{ inputs.test_scenario == 'env-vars-only' }}
        env:
          AZURE_AI_FOUNDRY_ENDPOINT: ${{ secrets.AZURE_AI_FOUNDRY_ENDPOINT }}
          AZURE_AI_FOUNDRY_API_KEY: ${{ secrets.AZURE_AI_FOUNDRY_API_KEY }}
          AZURE_AI_FOUNDRY_MODEL_DEPLOYMENT: 'gpt-4o-mini'
          AZURE_AI_FOUNDRY_API_VERSION: '2025-04-01-preview'
        run: |
          echo "## Testing: Environment Variables Only" >> $GITHUB_STEP_SUMMARY
          echo "All configuration from environment variables (no action inputs)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Verify env vars are set
          echo "✓ AZURE_AI_FOUNDRY_ENDPOINT set"
          echo "✓ AZURE_AI_FOUNDRY_API_KEY set"
          echo "✓ AZURE_AI_FOUNDRY_MODEL_DEPLOYMENT set"
          echo "✓ AZURE_AI_FOUNDRY_API_VERSION set"
          
          # Run validation (uses env vars via ISSUE_AGENT_* aliases)
          export ISSUE_AGENT_ENDPOINT="$AZURE_AI_FOUNDRY_ENDPOINT"
          export ISSUE_AGENT_KEY="$AZURE_AI_FOUNDRY_API_KEY"
          ./validate-connection.sh
          
          echo "✅ Environment variable configuration works!" >> $GITHUB_STEP_SUMMARY
      
      - name: Test Scenario - Mixed Configuration
        if: ${{ inputs.test_scenario == 'mixed-config' }}
        env:
          # Endpoint from env var
          AZURE_AI_FOUNDRY_ENDPOINT: ${{ secrets.AZURE_AI_FOUNDRY_ENDPOINT }}
          # API key from env var
          AZURE_AI_FOUNDRY_API_KEY: ${{ secrets.AZURE_AI_FOUNDRY_API_KEY }}
        run: |
          echo "## Testing: Mixed Configuration" >> $GITHUB_STEP_SUMMARY
          echo "Endpoint and API key from env vars, model/version would come from inputs or defaults" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          export ISSUE_AGENT_ENDPOINT="$AZURE_AI_FOUNDRY_ENDPOINT"
          export ISSUE_AGENT_KEY="$AZURE_AI_FOUNDRY_API_KEY"
          ./validate-connection.sh
          
          echo "✅ Mixed configuration works!" >> $GITHUB_STEP_SUMMARY
      
      - name: Test Scenario - Validation Errors
        if: ${{ inputs.test_scenario == 'validation-errors' }}
        run: |
          echo "## Testing: Validation Error Handling" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test 1: Missing endpoint
          echo "### Test 1: Missing Endpoint" >> $GITHUB_STEP_SUMMARY
          export ISSUE_AGENT_ENDPOINT=""
          export ISSUE_AGENT_KEY="test-key-with-minimum-length-requirement-met-here-1234567890"
          if ./validate-connection.sh 2>&1 | grep -q "endpoint is required"; then
            echo "✅ Correctly detected missing endpoint" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Failed to detect missing endpoint" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Test 2: Invalid endpoint format (HTTP instead of HTTPS)
          echo "### Test 2: Invalid Endpoint Format" >> $GITHUB_STEP_SUMMARY
          export ISSUE_AGENT_ENDPOINT="http://test.services.ai.azure.com/api/projects/test"
          export ISSUE_AGENT_KEY="test-key-with-minimum-length-requirement-met-here-1234567890"
          if ./validate-connection.sh 2>&1 | grep -q "HTTPS URL"; then
            echo "✅ Correctly detected invalid endpoint format" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Failed to detect invalid endpoint format" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Test 3: API key too short
          echo "### Test 3: API Key Too Short" >> $GITHUB_STEP_SUMMARY
          export ISSUE_AGENT_ENDPOINT="${{ secrets.AZURE_AI_FOUNDRY_ENDPOINT }}"
          export ISSUE_AGENT_KEY="short"
          if ./validate-connection.sh 2>&1 | grep -q "at least 32 characters"; then
            echo "✅ Correctly detected short API key" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Failed to detect short API key" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All validation tests passed!" >> $GITHUB_STEP_SUMMARY
      
      - name: Run Integration Tests
        if: ${{ inputs.test_scenario != 'validation-errors' }}
        env:
          AZURE_AI_FOUNDRY_ENDPOINT: ${{ secrets.AZURE_AI_FOUNDRY_ENDPOINT }}
          AZURE_AI_FOUNDRY_API_KEY: ${{ secrets.AZURE_AI_FOUNDRY_API_KEY }}
        run: |
          dotnet test tests/IssueAgent.IntegrationTests/IssueAgent.IntegrationTests.csproj \
            --filter "FullyQualifiedName~AzureFoundry.ConnectionTests" \
            --configuration Release \
            --verbosity normal
      
      - name: Summary
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**Test Scenario**: ${{ inputs.test_scenario }}" >> $GITHUB_STEP_SUMMARY

# Required secrets:
# - AZURE_AI_FOUNDRY_ENDPOINT: Your Azure AI Foundry project endpoint
# - AZURE_AI_FOUNDRY_API_KEY: Your Azure AI Foundry API key
#
# This workflow tests:
# 1. Pure environment variable configuration (no action inputs)
# 2. Mixed configuration (env vars + defaults)
# 3. Validation error handling with various invalid configs
